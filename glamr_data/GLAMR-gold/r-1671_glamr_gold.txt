# :: r-1671::step01::sent01
# :: snt1	Heat the butter in a saucepan and roast the onions .
(s1a / and~6
     :op1 (s1h / heat-ON-01~0
               :ARG1 (s1b / butter~2)
               :location (s1s / saucepan~5)
               :ARG0 (s1y / you)
               :event-structure (s1se / subevents
                                      :E1 (s1c / cooked
                                               :polarity -
                                               :PATIENT s1b
                                               :V_FINAL_STATE (s1h1 / heated))
                                      :E3 (s1a1 / apply_heat
                                                :PATIENT s1b)
                                      :E4 (s1c1 / cooked
                                                :PATIENT s1b
                                                :V_FINAL_STATE s1h1)
                                      :E0 (s1d / do
                                               :ACTION s1h))
               :imp_output (s1h2 / heat.RES))
     :op2 (s1r / roast-01~7
               :ARG1 (s1o / onion~9)
               :ARG0 s1y
               :event-structure (s1se1 / subevents
                                       :E1 (s1c2 / cooked
                                                 :polarity -
                                                 :PATIENT s1o
                                                 :V_FINAL_STATE (s1r1 / roasted))
                                       :E3 (s1a2 / apply_heat
                                                 :PATIENT s1o)
                                       :E4 (s1c3 / cooked
                                                 :PATIENT s1o
                                                 :V_FINAL_STATE s1r1)
                                       :E0 (s1d1 / do
                                                 :ACTION s1r))
               :imp_output (s1r2 / roast.RES))
     :mode imperative)


# :: r-1671::step02::sent01
# :: snt2	Add some water , the corn flour and stir .
(s2a2 / and
      :op1 (s2a / add-02~0
                :ARG1 (s2a3 / and~7
                            :op1 (s2w / water~2
                                      :quant (s2s / some~1))
                            :op2 (s2f2 / flour~6
                                       :source (s2c / corn~5)))
                :ARG0 (s2y / you)
                :event-structure (s2se / subevents
                                       :E1 (s2t / together
                                                :polarity -
                                                :PATIENT_I s2w
                                                :PATIENT_J s2f2)
                                       :E3 (s2t1 / together
                                                 :PATIENT_I s2w
                                                 :PATIENT_J s2f2)
                                       :E0 (s2d / do
                                                :ACTION s2a))
                :imp_output (s2a1 / add.RES))
      :op2 (s2s2 / stir-01~8
                 :ARG0 s2y
                 :event-structure (s2se1 / subevents
                                         :E1 (s2h / has_material_integrity_state
                                                  :polarity -
                                                  :IMP_PATIENT s2a1
                                                  :V_STATE (s2s1 / stirred))
                                         :E3 (s2h1 / has_material_integrity_state
                                                   :IMP_PATIENT s2a1
                                                   :V_STATE s2s1)
                                         :E0 (s2d1 / do
                                                   :ACTION s2s2))
                 :imp_output (s2s3 / stir.RES))
      :mode imperative)


# :: r-1671::step03::sent01
# :: snt3	Add 5 cups of water , the rest of the ingredients and simmer until the vegetables are tender .
(s3a2 / and
      :op1 (s3a / add-02~0
                :ARG1 (s3a3 / and~11
                            :op1 (s3w / water~4
                                      :quant (s3v2 / volume-quantity
                                                   :unit (s3c / cup~2)
                                                   :quant 5))
                            :op2 (s3i2 / ingredient~10
                                       :mod (s3r / rest~7)))
                :ARG0 (s3y / you)
                :event-structure (s3se / subevents
                                       :E1 (s3t1 / together
                                                 :polarity -
                                                 :PATIENT_I s3w
                                                 :PATIENT_J s3i2)
                                       :E3 (s3t2 / together
                                                 :PATIENT_I s3w
                                                 :PATIENT_J s3i2)
                                       :E0 (s3d / do
                                                :ACTION s3a))
                :imp_output (s3a1 / add.RES))
      :op2 (s3s / simmer-01~12
                :duration (s3u / until~13
                               :op1 (s3t / tender~17
                                         :ARG1 (s3v / vegetable~15)))
                :ARG0 s3y
                :event-structure (s3se1 / subevents
                                        :E1 (s3c1 / cooked
                                                  :polarity -
                                                  :IMP_PATIENT s3a1
                                                  :V_FINAL_STATE (s3s1 / simmered))
                                        :E3 (s3a4 / apply_heat
                                                  :IMP_PATIENT s3a1)
                                        :E4 (s3a5 / and
                                                  :op1 (s3c2 / cooked
                                                             :IMP_PATIENT s3a1
                                                             :V_FINAL_STATE s3s1)
                                                  :op2 (s3h / has_state
                                                            :IMP_PATIENT s3a1
                                                            :RESULT s3t))
                                        :E0 (s3d1 / do
                                                  :ACTION s3s))
                :imp_output (s3s2 / simmer.RES))
      :mode imperative)


# :: r-1671::step04::sent01
# :: snt4	Remove from heat .
(s4r / remove-01~0
     :ARG2 (s4h / heat~2)
     :mode imperative
     :ARG0 (s4y / you)
     :event-structure (s4se / subevents
                            :E1 (s4h1 / has_location)
                            :E3 (s4a / and
                                     :op1 (s4m / motion
                                               :IMP_THEME (s4s / simmer.RES))
                                     :op2 (s4h2 / has_location
                                                :polarity -
                                                :IMP_THEME s4s))
                            :E4 (s4h3 / has_location
                                      :IMP_THEME s4s)
                            :E0 (s4d / do
                                     :ACTION s4r))
     :imp_output (s4r1 / remove.RES))


# :: r-1671::step05::sent01
# :: snt5	Sieve soup if you desire .
(s5s / sieve-ON-02~0
     :ARG1 (s5s2 / soup~1)
     :condition (s5d / desire-01
                     :ARG0 (s5y / you~3,4))
     :mode imperative
     :ARG0 (s5y1 / you)
     :event-structure (s5se / subevents
                            :E1 (s5a / attached
                                     :PATIENT s5s2)
                            :E3 (s5a1 / attached
                                      :polarity -
                                      :PATIENT s5s2)
                            :E0 (s5d1 / do
                                      :ACTION s5s))
     :imp_output (s5s1 / sieve.RES))


# :: r-1671::step06::sent01
# :: snt6	Serve hot .
(s6s / serve-02~0
     :manner (s6h / hot~1)
     :mode imperative
     :ARG0 (s6y / you)
     :event-structure (s6se / subevents
                            :E1 (s6a / and
                                     :op1 (s6h1 / has_possession
                                                :IMP_THEME (s6s1 / sieve.RES))
                                     :op2 (s6h2 / has_possession
                                                :polarity -
                                                :IMP_THEME s6s1))
                            :E2 (s6t / transfer
                                     :IMP_THEME s6s1)
                            :E3 (s6a1 / and
                                      :op1 (s6h3 / has_possession
                                                 :IMP_THEME s6s1)
                                      :op2 (s6h4 / has_possession
                                                 :polarity -
                                                 :IMP_THEME s6s1))
                            :E0 (s6d / do
                                     :ACTION s6s))
     :imp_output (s6s2 / serve.RES))


